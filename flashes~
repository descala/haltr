app/controllers/clients_controller.rb:          flash[:notice] = l(:notice_successful_create)
app/controllers/clients_controller.rb:          flash[:notice] = l(:notice_successful_update)
app/controllers/companies_controller.rb:          flash[:warning] = I18n.t(:cant_modify_taxcode, suport_link: view_context.link_to(I18n.t(:suport_link), project_new_support_path(@company.project))).html_safe
app/controllers/companies_controller.rb:              flash[:warning] = $!.message
app/controllers/companies_controller.rb:              flash[:warning] = l(:logo_not_image)
app/controllers/companies_controller.rb:            flash[:warning] = l(:logo_not_image)
app/controllers/companies_controller.rb:      flash[:notice] = l(:notice_successful_update) 
app/controllers/dir3_entities_controller.rb:      flash[:notice] = l(:notice_successful_create)
app/controllers/dir3_entities_controller.rb:      flash[:notice] = l(:notice_successful_update)
app/controllers/dir3_entities_controller.rb:      flash[:notice] = "Dir3Entities updated: #{existing}, created: #{new}, errors: #{error}. #{error_messages.join(', ')}"
app/controllers/dir3_entities_controller.rb:      flash[:error] = "Select a CSV file to import"
app/controllers/events_controller.rb:        flash[:notice] = 'Event was successfully created.'
app/controllers/external_companies_controller.rb:      flash[:notice] = l(:notice_successful_create)
app/controllers/external_companies_controller.rb:      flash[:notice] = l(:notice_successful_update)
app/controllers/external_companies_controller.rb:      flash[:notice] = "External Companies updated: #{existing}, created: #{new}, errors: #{error}. #{error_messages.join(', ')}"
app/controllers/external_companies_controller.rb:      flash[:error] = "Select a CSV file to import"
app/controllers/invoice_templates_controller.rb:        flash.now[:error] = l(:template_too_old, :client => t.client.name)
app/controllers/invoice_templates_controller.rb:        flash.now[:error] = l(:template_too_old, :client => t.client.name)
app/controllers/invoice_templates_controller.rb:        flash.now[:warning] = l(:warning_can_not_generate_invoice,view_context.link_to(t.to_s, edit_invoice_template_path(t))).html_safe
app/controllers/invoice_templates_controller.rb:        flash.now[:error] = e.message
app/controllers/invoice_templates_controller.rb:        flash.now[:error] = issued.errors.full_messages.join ","
app/controllers/invoice_templates_controller.rb:    flash.now[:notice] = "Updated #{num_changed} template lines" if from_name and from_percent
app/controllers/invoices_controller.rb:          flash[:notice] = l(:notice_successful_create)
app/controllers/invoices_controller.rb:              flash[:error] = l(:errors_prevented_invoice_sent)
app/controllers/invoices_controller.rb:      flash[:notice] = l(:notice_successful_update)
app/controllers/invoices_controller.rb:              flash[:error] = l(:errors_prevented_invoice_sent)
app/controllers/invoices_controller.rb:        flash.now[:error] = l(:pdf_shows_original) unless @invoice.send_original?
app/controllers/invoices_controller.rb:          flash.now[:error] = l(:xslt_shows_original)
app/controllers/invoices_controller.rb:        flash[:error] = l(:xslt_not_available)
app/controllers/invoices_controller.rb:          flash[:error] = @invoice.errors.full_messages.join('. ')
app/controllers/invoices_controller.rb:          flash[:notice] = "#{l(:notice_invoice_sent)}"
app/controllers/invoices_controller.rb:          flash[:error] = error
app/controllers/invoices_controller.rb:        flash[:error] = msg
app/controllers/invoices_controller.rb:      flash[:error] = l(:too_much_invoices,:num=>invoices.size)
app/controllers/invoices_controller.rb:    flash[:error] = l(:zip_gem_required)
app/controllers/invoices_controller.rb:            flash[:warning]=$!.message
app/controllers/invoices_controller.rb:    flash[:error]=e.message
app/controllers/invoices_controller.rb:      flash[:error]="invalid date: #{@from}"
app/controllers/invoices_controller.rb:      flash[:error]="invalid date: #{@to}"
app/controllers/invoices_controller.rb:      flash[:error]="invalid date: #{@from}"
app/controllers/invoices_controller.rb:      flash[:error]="invalid date: #{@to}"
app/controllers/invoices_controller.rb:      flash[:error] = "unknown format #{params[:in]}"
app/controllers/invoices_controller.rb:      flash[:error] = l(:too_much_invoices,:num=>@invoices.size)
app/controllers/invoices_controller.rb:    flash[:error] = l(:zip_gem_required)
app/controllers/invoices_controller.rb:      flash[:error] = "unknown state #{params[:state]}"
app/controllers/invoices_controller.rb:      flash[:error] = "unknown state #{params[:state]}"
app/controllers/invoices_controller.rb:    flash[:warn] = l(:some_states_not_changed) unless all_changed
app/controllers/invoices_controller.rb:      flash[:error] = l(:some_invoices_sent,:sent=>@num_sent,:total=>num_invoices)
app/controllers/invoices_controller.rb:      flash[:notice] = l(:all_invoices_sent)
app/controllers/invoices_controller.rb:            flash[:warning] = l(:notice_uploaded_file_not_found)
app/controllers/invoices_controller.rb:        flash[:error] = $!.message
app/controllers/invoices_controller.rb:              flash[:notice] = "#{l(:notice_invoice_processing_pdf)}"
app/controllers/invoices_controller.rb:            flash[:warning] = l(:notice_uploaded_file_not_found)
app/controllers/invoices_controller.rb:        flash[:error] = $!.message
app/controllers/invoices_controller.rb:      flash[:notice] = l(:label_comment_added)
app/controllers/invoices_controller.rb:    flash[:notice] = "#{l(:notice_invoice_processing_pdf)}"
app/controllers/invoices_controller.rb:    flash[:error] = 'Connection refused, try again later'
app/controllers/invoices_controller.rb:    flash[:notice] = l(:processing_pdfs, count: @invoices.count)
app/controllers/invoices_controller.rb:    flash[:error] = 'Connection refused, try again later'
app/controllers/mandates_controller.rb:          flash[:notice] = l(:notice_successful_create)
app/controllers/mandates_controller.rb:      flash[:notice] = l(:notice_successful_update)
app/controllers/mandates_controller.rb:      flash[:error] = "asd"
app/controllers/orders_controller.rb:        flash[:error] = e.message
app/controllers/orders_controller.rb:      flash[:notice] = l(:label_comment_added)
app/controllers/orders_controller.rb:    flash[:error] = $!.message
app/controllers/payments_controller.rb:      flash[:notice] = l(:notice_successful_create)
app/controllers/payments_controller.rb:      flash[:notice] = l(:notice_successful_update)
app/controllers/payments_controller.rb:        flash[:warning] = l(:notice_empty_sepa)
app/controllers/payments_controller.rb:      flash[:warning] = e.to_s
app/controllers/payments_controller.rb:    flash[:notice] = l(:notice_payment_done, :payment_type => params[:payment_type], :value => params[:due_date])
app/controllers/payments_controller.rb:      flash[:warning] = l(:notice_uploaded_file_not_found)
app/controllers/payments_controller.rb:      flash[:error]="invalid date: #{@from}"
app/controllers/payments_controller.rb:      flash[:error]="invalid date: #{@to}"
app/controllers/people_controller.rb:      flash[:notice] = l(:notice_successful_create)
app/controllers/people_controller.rb:      flash[:notice] = l(:notice_successful_update)
app/controllers/quotes_controller.rb:      flash[:notice] = l(:notice_successful_create)
app/controllers/quotes_controller.rb:          flash[:error] = l(:errors_prevented_quote_sent)
app/controllers/quotes_controller.rb:      flash[:notice] = l(:notice_successful_update)
app/controllers/quotes_controller.rb:          flash[:error] = l(:errors_prevented_quote_sent)
app/controllers/quotes_controller.rb:    flash[:notice] = "#{l(:notice_quote_sent)}"
app/controllers/quotes_controller.rb:    flash[:error] = "#{l(:error_quote_not_sent, :num=>@invoice.number)}: #{e.message}"
app/controllers/received_controller.rb:      flash[:error] = "Can't edit received invoices"
app/controllers/received_controller.rb:      flash[:error] = "unknown state #{params[:state]}"
app/controllers/received_controller.rb:    flash[:warn] = l(:some_states_not_changed) unless all_changed
